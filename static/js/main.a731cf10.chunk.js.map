{"version":3,"sources":["components/Navigation/Navigation.js","components/Logo/Logo.js","components/ValidatedForm/Signin.js","components/ValidatedForm/Register.js","components/PasswordChecker/PasswordChecker.js","components/ImageFaceDetection/ImageLinkForm/ImageLinkForm.js","components/ImageFaceDetection/FaceRecognition/FaceRecognition.js","components/ImageFaceDetection/Rank/Rank.js","components/ImageFaceDetection/ImageFaceDetection.js","components/VideoPlayer/VideoPlayer.js","App.js","serviceWorker.js","index.js","components/Logo/brain.png","components/VideoPlayer/test2.mp4"],"names":["Navigation","onRouteChange","isSignedIn","style","display","justifyContent","onClick","className","Logo","options","max","height","width","alt","src","brain","Signin","loadUser","initialValues","isSubmitting","email","password","onSubmit","values","setSubmitting","setuser","setTimeout","fetch","method","headers","body","JSON","stringify","then","response","json","data","id","console","log","catch","err","validationSchema","Yup","shape","required","min","matches","props","touched","errors","handleChange","handleBlur","handleSubmit","htmlFor","type","name","value","onChange","onBlur","href","Register","initState","inserted_password","output","PasswordChecker","onInputChange","event","setState","target","onPasswordSubmit","state","result","this","includes","marginTop","fontSize","color","React","Component","ImageLinkForm","input_error","onButtonSubmit","FaceRecognition","box","imageUrl","isImageUrl","heigh","map","item","index","key","toString","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","Rank","entries","app","Clarifai","App","apiKey","ImageFaceDetection","input","calculateFaceLocation","clarifaiFaces_array","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","left_col","top_row","right_col","bottom_row","displayAllFaces","faces_array","models","predict","FACE_DETECT_MODEL","user","count","Object","assign","joined","VideoPlayer","controls","autostart","autoPlay","Video","particlesOptions","particles","number","density","enable","value_area","route","joindate","params","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.a731cf10.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\n\r\nconst Navigation = ({onRouteChange,isSignedIn}) => {\r\n\r\n        if (isSignedIn){\r\n            return(\r\n                <nav style={{display: 'flex', justifyContent: 'flex-end'}} >\r\n                    <p onClick={()=>onRouteChange('signout')} className='f4 link dim black underline pa3 pointer' >Sign Out</p>\r\n                    <p onClick={()=>onRouteChange('imagefacedetection')} className='f4 link dim black underline pa3 pointer' >Face Detection</p>\r\n                </nav>\r\n                );\r\n        }\r\n        else{\r\n            return(\r\n                <nav style={{display: 'flex', justifyContent: 'flex-end'}} >\r\n                    <p onClick={()=>onRouteChange('signin')} className='f3 link dim black underline pa3 pointer' >Sign In</p>\r\n                    <p onClick={()=>onRouteChange('register')} className='f3 link dim black underline pa3 pointer' >Register</p>\r\n                </nav>\r\n            );\r\n\r\n        }\r\n\r\n    \r\n    \r\n   \r\n      \r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport Tilt from 'react-tilt'\r\nimport brain from './brain.png'\r\nimport './Logo.css';\r\nconst Logo =() =>{\r\n    return(\r\n       <div className='ma4 mt0'>\r\n           <Tilt className=\"Tilt br2 shadow-2\" options={{ max : 60 }} style={{ height: 150, width: 150 }} >\r\n                <div className=\"Tilt-inner pa3\">\r\n                     <img  alt='logo' src={brain}/>\r\n                </div>\r\n            </Tilt>\r\n       </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Logo","import React from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport './ValidatedForm.css'\r\n//Register  ValidatedRegisterForm\r\n\r\nconst Signin = ({onRouteChange,loadUser}) => (\r\n \r\n  <Formik\r\n    initialValues={{isSubmitting:\"\",email: \"\", password: \"\" }}\r\n    onSubmit={(values, { setSubmitting,setuser}) => {\r\n      setTimeout(() => {\r\n        // console.log(onRouteChange)\r\n        fetch('/sginin', {\r\n          method: 'post',\r\n          headers: {'Content-Type': 'application/json'},\r\n          body: JSON.stringify({\r\n          email:values.email,\r\n          password: values.password,\r\n          })\r\n        })\r\n        .then(response => response.json())// response from server \r\n        // .then(response => response.text())\r\n        .then(data=>{\r\n          // console.log(data)\r\n        //  if (data===\"loggin in\"){\r\n         if(data.id){      \r\n            // console.log(\"Logging in\", values);\r\n            // setuser=loadUser(data)\r\n            loadUser(data)\r\n            //if all good- move to home page\r\n            values.isSubmitting= true\r\n            setSubmitting=onRouteChange('home')\r\n          }\r\n          else if (data===\"error loggin in!!\"){\r\n              console.log(\"worng email or password\")\r\n              // values.password=\"\"\r\n              values.isSubmitting= false\r\n              \r\n\r\n          }\r\n          else{//\r\n            console.log(\"Ooops something went wrong\")\r\n              values.isSubmitting= false\r\n\r\n          }\r\n          console.log( values.isSubmitting)\r\n    \r\n        })\r\n        .catch(err=>console.log(err));\r\n        \r\n      }, 500);\r\n\r\n    \r\n      \r\n    }}\r\n    \r\n    validationSchema={Yup.object().shape({\r\n      // isSubmitting: Yup.string()\r\n      // .required(\"Required\"),\r\n      email: Yup.string()\r\n        .email()\r\n        .required(\"Required\"),\r\n      password: Yup.string()\r\n        .required(\"No password provided.\")\r\n        .min(1, \"Password is too short - should be 8 chars minimum.\")\r\n        .matches(/(?=.*[0-9])/, \"Password must contain a number.\")\r\n    })}\r\n  >\r\n    {props => {\r\n      const {\r\n        values,\r\n        touched,\r\n        errors,\r\n        // isSubmitting,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n      } = props;\r\n      return (\r\n\r\n        <article  className=\"br3 ba b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\r\n        <main className=\"pa4 black-80\">\r\n        <form className=\"measure \" onSubmit={handleSubmit}>\r\n          <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n            <legend className=\"f1 fw6 ph0 mh0\">Sign In</legend>\r\n            <div className=\"mt3\">\r\n              <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n              <input \r\n                //  className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" \r\n                className={\"pa2 input-reset ba bg-transparent hover-bg-white hover-white w-100\"  && errors.email && touched.email && \"error\" }\r\n                type=\"email\" \r\n                name=\"email\"  \r\n                id=\"email-address\"\r\n                value={values.email}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                \r\n                />\r\n                {errors.email && touched.email && (\r\n                <div className=\"input-feedback\">{errors.email}</div>\r\n                 )}\r\n                \r\n            </div>\r\n            <div className=\"mv3\">\r\n              <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n              <input \r\n                // className=\"b pa2 input-reset ba bg-transparent hover-bg-white hover-white w-100\"\r\n                className={\"b pa2 input-reset ba bg-transparent hover-bg-white hover-white w-100\" && errors.password && touched.password && \"error\"  } \r\n                type=\"password\" \r\n                name=\"password\"  \r\n                id=\"password\"\r\n                value={values.password}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                />\r\n                {errors.password && touched.password && (\r\n                <div className=\"input-feedback\">{errors.password}</div>\r\n                )}\r\n            </div>\r\n            {/* <label class=\"pa0 ma0 lh-copy f6 pointer\"><input type=\"checkbox\"/> Remember me</label> */}\r\n             \r\n          </fieldset>\r\n          <div className=\"\">\r\n            <input \r\n              className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib \" \r\n              type=\"submit\" \r\n              value=\"Sign in\"\r\n              // onSubmit={handleSubmit}\r\n              // disabled={isSubmitting}\r\n                name=\"Sign in\"  \r\n                id=\"signin\"\r\n                // value={values.isSubmitting}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n             \r\n            \r\n              />\r\n              \r\n              {values.isSubmitting===false?\r\n              \r\n                (<div className=\"input-feedback\">wrong email or password!</div>\r\n                ):\"\"}\r\n          \r\n          </div>\r\n          <div className=\"lh-copy mt3\">\r\n            <p onClick={()=>onRouteChange('register')} href=\"#0\" className=\"f6 link dim black db pointer\">Register</p> \r\n              \r\n          </div>\r\n        </form>\r\n      </main>\r\n      </article>\r\n        \r\n      );\r\n    }}\r\n  </Formik>\r\n);\r\n\r\nexport default Signin;\r\n","import React from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport './ValidatedForm.css'\r\n//Register  ValidatedRegisterForm\r\nconst Register = ({onRouteChange,loadUser}) => (\r\n  \r\n  <Formik\r\n    initialValues={{isSubmitting:\"\",name:\"\", email: \"\", password: \"\" }}\r\n    onSubmit={(values, {setuser, setSubmitting}) => {\r\n      setTimeout(() => {\r\n        // console.log(onRouteChange)\r\n        fetch('/register', {\r\n          method: 'post',\r\n          headers: {'Content-Type': 'application/json'},\r\n          body: JSON.stringify({\r\n          name : values.name,\r\n          email:values.email,\r\n          password: values.password,\r\n          })\r\n        })\r\n        .then(response => response.json())\r\n        // .then(response => response.text())\r\n        .then(data=>{\r\n          // console.log(data)\r\n          // if (data===\"register\"){\r\n            if (data.id){\r\n\r\n            // console.log(\"register\", values);\r\n            setuser=loadUser(data)\r\n            // console.log(setuser)\r\n            //if all good- move to home page\r\n            setSubmitting=onRouteChange('home')\r\n            values.isSubmitting=true\r\n          }\r\n          else if(data==='didnt save user!!'){\r\n            console.log('Please enter different email or password ')\r\n            values.isSubmitting=false\r\n          }\r\n          else{\r\n            console.log('something went wrong , Please try again')\r\n            values.isSubmitting=false\r\n          }\r\n        })\r\n        .catch(err=>console.log(err));\r\n      }, 500);\r\n      \r\n    }}\r\n\r\n    validationSchema={Yup.object().shape({\r\n      name: Yup.string()\r\n        .required(\"Required\")\r\n        .min(1, \"Name too short\"),\r\n      email: Yup.string()\r\n        .email()\r\n        .required(\"Required\"),\r\n      password: Yup.string()\r\n        .required(\"No password provided.\")\r\n        .min(1, \"Password is too short - should be 8 chars minimum.\")\r\n        .matches(/(?=.*[0-9])/, \"Password must contain a number.\")\r\n    })}\r\n  >\r\n    {props => {\r\n      const {\r\n        values,\r\n        // name,\r\n        touched,\r\n        errors,\r\n        // isSubmitting,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n      } = props;\r\n      return (\r\n        <article  className=\"br3 ba b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\r\n        <main className=\"pa4 black-80\">\r\n        <form className=\"measure \" onSubmit={handleSubmit}>\r\n          <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n            <legend className=\"f1 fw6 ph0 mh0\">Register </legend>\r\n            <div className=\"mt3\">\r\n              <label className=\"db fw6 lh-copy f6\" htmlFor=\"name-address\">Name</label>\r\n              <input \r\n                //  className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" \r\n                className={\"pa2 input-reset ba bg-transparent hover-bg-white hover-white w-100\" && errors.name && touched.name && \"error\" }\r\n                type=\"text\" \r\n                name=\"name\"  \r\n                id=\"name\"\r\n                value={values.name}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n        \r\n                />\r\n                 {errors.name && touched.name && (\r\n                <div className=\"input-feedback\">{errors.name}</div>\r\n                 )}\r\n            </div>\r\n            <div className=\"mt3\">\r\n              <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n              <input \r\n                //  className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" \r\n                className={\"pa2 input-reset ba bg-transparent hover-bg-white hover-white w-100\"  && errors.email && touched.email && \"error\" }\r\n                type=\"email\" \r\n                name=\"email\"  \r\n                id=\"email-address\"\r\n                value={values.email}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                \r\n                />\r\n                {errors.email && touched.email && (\r\n                <div className=\"input-feedback\">{errors.email}</div>\r\n                 )}\r\n                \r\n            </div>\r\n            <div className=\"mv3\">\r\n              <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n              <input \r\n                // className=\"b pa2 input-reset ba bg-transparent hover-bg-white hover-white w-100\"\r\n                className={\"b pa2 input-reset ba bg-transparent hover-bg-white hover-white w-100\" && errors.password && touched.password && \"error\"  } \r\n                type=\"password\" \r\n                name=\"password\"  \r\n                id=\"password\"\r\n                value={values.password}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                />\r\n                {errors.password && touched.password && (\r\n                <div className=\"input-feedback\">{errors.password}</div>\r\n                )}\r\n            </div>\r\n            {/* <label class=\"pa0 ma0 lh-copy f6 pointer\"><input type=\"checkbox\"/> Remember me</label> */}\r\n            <p onClick={()=>onRouteChange('passwordChecker')} href=\"#0\" className=\"f6 link dim black db pointer\"> password check?</p>\r\n          </fieldset>\r\n          \r\n          <div className=\"\">\r\n            <input \r\n              className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib \" \r\n              type=\"submit\" \r\n              value=\"Register\"\r\n\r\n              // disabled={isSubmitting}\r\n              />\r\n               {values.isSubmitting===false?\r\n              \r\n              (<div className=\"input-feedback\">Please enter different email or password</div>\r\n              ):\"\"}\r\n          </div>\r\n          \r\n        </form>\r\n      </main>\r\n      </article>\r\n        \r\n      );\r\n    }}\r\n  </Formik>\r\n);\r\n\r\nexport default Register;\r\n","import React from 'react';\r\n// import './PasswordChecker.css';\r\n// import PasswordList from './PasswordList.js'\r\nconst initState={\r\n   inserted_password:'',\r\n   output:''\r\n}\r\nclass PasswordChecker extends React.Component  {\r\n\r\n  constructor(props){\r\n      super(props);\r\n      this.state=initState\r\n  \r\n    }\r\n\r\n  /*triggered every time user enter input*/\r\n  onInputChange = (event) => {\r\n    this.setState({inserted_password: event.target.value});\r\n    console.log( event.target.value)/* print the entred input */\r\n    // console.log(this.state.input)\r\n  }\r\n  \r\n  onPasswordSubmit = () => {\r\n    console.log('click');\r\n    //  this.props.onRouteChange('passwordChecker')\r\n    fetch('/password_checker', {\r\n      method: 'post',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify({\r\n        password:this.state.inserted_password\r\n     \r\n      })\r\n    })\r\n    .then(response => response.json())\r\n    // .then(response => response.text())\r\n    .then(result=>{\r\n      console.log(result)\r\n      this.setState({output:result})\r\n\r\n    })\r\n    .catch(err=>console.log(err));\r\n    \r\n\r\n  }\r\n\r\n\r\n  render(){\r\n      return (\r\n\r\n          <div>\r\n              {/* <p>PasswordChecker</p>  */}\r\n          <article  className=\"br3 ba b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\r\n            <main className=\"pa4 black-80\">\r\n            <div className=\"measure \"  >\r\n              <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n                <legend className=\"f3 fw6 ph0 mh0\">Password Checker</legend>\r\n                <div className=\"mt3\">\r\n                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Enter password</label>\r\n                            <input\r\n                              className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                              // type=\"password\" \r\n                              name=\"password\"\r\n                              id=\"password\"\r\n                              onChange={this.onInputChange}\r\n                              \r\n                              />\r\n                        </div>\r\n                    \r\n              \r\n\r\n                  {/* <label class=\"pa0 ma0 lh-copy f6 pointer\"><input type=\"checkbox\"/> Remember me</label> */}\r\n              </fieldset>\r\n              <div className=\"\">\r\n                <input \r\n                  className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib \" \r\n                  type=\"submit\" \r\n                  value=\"check\"\r\n                  onClick={this.onPasswordSubmit}\r\n                  \r\n                  \r\n                      \r\n                  />\r\n                  \r\n              </div>\r\n              \r\n            </div>\r\n            \r\n          </main>\r\n          </article>\r\n\r\n          {/* <PasswordList paswwordinfoarray={this.state.paswwordinfoarray} /> */}\r\n          {  this.state.output!=='' && this.state.output.includes('was found')\r\n                    ? <div style={{marginTop: 20 ,fontSize:30, color:\"red\"}}> {this.state.output} </div>\r\n                    :(\r\n                      this.state.output!=='' && this.state.output.includes('NOT found')\r\n                      ?  <div style={{marginTop: 20 ,fontSize:30, color:\"green\"}}> {this.state.output} </div>\r\n                      :\"\"                   \r\n                    )\r\n                    }\r\n          </div>\r\n        \r\n        \r\n      );\r\n  }\r\n\r\n  \r\n}\r\n\r\nexport default PasswordChecker;","/* display image from page for face detection  */\r\n\r\nimport React from 'react';\r\nimport './ImageLinkForm.css';\r\n\r\nconst ImageLinkForm = ({input_error,onInputChange,onButtonSubmit}) => {\r\n\r\n  return (\r\n\r\n      <div>\r\n            {/* {console.log(input)} */}\r\n      <p className='f3'>\r\n          {'This Brain will detect the face in the picture . Try it(; '}  \r\n      </p>\r\n      <div className='center'>\r\n        <div className='form1 center pa4 br3 shadow-5'>\r\n          <input className='f4 pa2 w-70 center' type='tex'\r\n            onChange={onInputChange}\r\n            />\r\n           \r\n            <button className='w-30 grow f4 link ph3 pv2 dib white bg-light-purple'\r\n            onClick={onButtonSubmit}\r\n            >\r\n            Detect</button>\r\n        </div>\r\n      </div>\r\n      {  input_error!==''\r\n      ? <div style={{marginTop: 20 ,fontSize:20, color:\"red\"}}> *Please enter image link </div>\r\n      : \"\"\r\n\r\n      }\r\n\r\n      </div>\r\n   \r\n   \r\n  );\r\n}\r\n\r\nexport default ImageLinkForm;","import React from 'react';\r\nimport './FaceRecognition.css';\r\nimport  isImageUrl  from 'is-image-url'\r\n// left = atuo mean the img fix to the widh of the image \r\n//  for getting normal size of image \r\nconst FaceRecognition = ({box,imageUrl}) => {\r\n  if(isImageUrl(imageUrl)){\r\n  return (\r\n    <div className='center ma'>\r\n      {/* {console.log(box)} */}\r\n      <div className='absolute mt2'> \r\n      <img  id='inputimage' alt='' src={imageUrl} width='500px' heigh='auto'/>  \r\n      {/* <img id='inputimage' alt='' src={imageUrl} width='500px' heigh='auto'/> */}\r\n        {/* div for drawing the square  */}\r\n        {\r\n          box.map((item,index)=>(\r\n          <div key={index.toString()} className='bounding-box' style={{top: item.topRow, right: item.rightCol, bottom: item.bottomRow, left: item.leftCol}}></div>  \r\n          ))\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n      }\r\n      else{\r\n        return(<div></div>)\r\n      }\r\n}\r\n\r\nexport default FaceRecognition;","/*\r\nRank give you\r\n-your user name\r\n- your rank compere to all other users  that submitted pictures\r\n*/\r\n\r\nimport React from 'react';\r\n\r\nconst Rank = ({ name, entries }) => {\r\n  return (\r\n    <div>\r\n      <div className='white f3'>\r\n        {`${name}, your current entry count is...`}\r\n      </div>\r\n      <div className='white f1'>\r\n        {/* {console.log(entries)} */}\r\n        {entries}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Rank;","import React  from 'react';\r\nimport ImageLinkForm from './ImageLinkForm/ImageLinkForm.js';\r\nimport FaceRecognition from './FaceRecognition/FaceRecognition.js'\r\nimport Rank from './Rank/Rank.js'\r\nimport  isImageUrl from 'is-image-url'\r\nimport Clarifai  from 'clarifai';\r\n// initialize with your api key.\r\nconst app = new Clarifai.App({\r\n  apiKey: '344f82caa0f94d048bd5051627471713'\r\n });\r\n\r\n// const initState={\r\n//   input :'',\r\n//   imageUrl:'',\r\n//   faces_array:[],\r\n//   input_error:'',\r\n//   // user1:{\r\n//   //   id: this.props.user.id,\r\n//   //   name:this.props.user.name,\r\n//   //   email:this.props.user.email,\r\n//   //   entries:this.props.user.entries,\r\n//   //   joined:this.props.user.joined\r\n//   // }\r\n\r\n// }\r\nclass ImageFaceDetection extends React.Component {\r\n  constructor(props){\r\n\r\n    super(props);\r\n    this.state={\r\n      input :'',\r\n      imageUrl:'',\r\n      faces_array:[],\r\n      input_error:'',\r\n      user:{\r\n        id: this.props.user.id,\r\n        name:this.props.user.name,\r\n        email:this.props.user.email,\r\n        entries:this.props.user.entries,\r\n        joined:this.props.user.joined\r\n      }\r\n    \r\n    }\r\n   \r\n    \r\n    //\r\n  }\r\n\r\n\r\n \r\n\r\n  /*triggered every time user enter input*/\r\n  onInputChange = (event) => {\r\n    this.setState({input: event.target.value});\r\n    \r\n    // console.log( event.target.value)/* print the entred input */\r\n    // console.log(this.state.input)\r\n  }\r\n\r\n\r\n\r\n   /* \r\n    calculate face location based on the input we get from clarifai API (return values in percentage)\r\n    func return object -  the 4 point of the square of the face region\r\n    \r\n    */\r\n  calculateFaceLocation = (data) => {\r\n    //  console.log(data.outputs[0].data.regions[0].region_info.bounding_box)// display regions of the first face\r\n    // data.outputs[0].data.regions.map(item=>{return console.log(item.region_info.bounding_box) })// display regions of all faces that was found\r\n    \r\n    // for detection of many faces \r\n    const clarifaiFaces_array = [...data.outputs[0].data.regions.map(item=>{return item.region_info.bounding_box })]\r\n    // clarifaiFaces_array.map(item=>{return console.log(item) }) \r\n    const image = document.getElementById('inputimage');// get image from FaceRecognition.js\r\n    const width = Number(image.width);\r\n    const height = Number(image.height);\r\n    // console.log(image);\r\n    // console.log(width,height)\r\n  \r\n    \r\n    \r\n    let clarifaiFaces_array1 = [...clarifaiFaces_array.map(item=>{\r\n      return {\r\n          leftCol: item.left_col * width,\r\n          topRow: item.top_row * height,\r\n          rightCol: width - (item.right_col * width),\r\n          bottomRow: height - (item.bottom_row * height)\r\n        \r\n      }\r\n   })]\r\n \r\n   return clarifaiFaces_array1;\r\n\r\n    \r\n\r\n  }\r\n\r\n\r\n   /* display all Faces  regions */ \r\n  displayAllFaces = (clarifaiFaces_array) => {\r\n    // clarifaiFaces_array.map(item=>{return console.log(item) })\r\n    this.setState(\r\n            \r\n     { faces_array: [...clarifaiFaces_array]}\r\n   );\r\n\r\n  }\r\n\r\n\r\n\r\n  /*\r\n\r\n    func for getting response when submitting the image link form\r\n\r\n  */\r\n  onButtonSubmit = () => {\r\n    // console.log('click'); \r\n    this.setState({imageUrl: this.state.input});\r\n    /*predict get : Clarifai model we whant to use  and  the url of the image (input) */\r\n    console.log(this.state.input)\r\n    console.log(isImageUrl(this.state.input))\r\n    if (isImageUrl(this.state.input))\r\n    {\r\n      this.setState({input_error:''})\r\n      app.models\r\n      .predict(\r\n        Clarifai.FACE_DETECT_MODEL,\r\n        this.state.input)\r\n        .then( response=>{\r\n          if (response){\r\n            // send to server \r\n            fetch('/image',{\r\n              method: 'put',\r\n              headers: {'Content-Type': 'application/json'},\r\n              body: JSON.stringify({\r\n              id :this.state.user.id,\r\n\r\n              })\r\n            })\r\n              .then(response=>response.json())\r\n              .then(count=>{\r\n                this.setState(Object.assign(this.state.user,{entries:count}))\r\n              })\r\n              .catch(console.log)// print error    \r\n          }\r\n          // console.log(response.outputs[0].data.regions) \r\n          this.displayAllFaces(this.calculateFaceLocation(response))\r\n        })\r\n        .catch(err=>console.log(err)) ;\r\n         \r\n\r\n    }\r\n    else{\r\n      console.log(\"empty link or incorrect image link \")\r\n      this.setState({input_error:\" false\"})\r\n    }\r\n   \r\n  }\r\n\r\n \r\n\r\n  render(){\r\n    const {input_error,faces_array,imageUrl} = this.state;\r\n    // {console.log(this.state.faces_array)}\r\n    return(\r\n        <div>\r\n         \r\n            <Rank name={this.state.user.name} entries={this.state.user.entries}/>\r\n            <ImageLinkForm input_error={input_error}  onInputChange={ this.onInputChange} onButtonSubmit={this.onButtonSubmit}/>\r\n            <FaceRecognition box={faces_array} imageUrl={imageUrl}/>\r\n        </div>\r\n\r\n    );\r\n    \r\n  }\r\n\r\n}\r\n\r\nexport default ImageFaceDetection;","import React  from 'react';\r\n// import ReactPlayer from \"react-player\";\r\nimport Video from \"./test2.mp4\";\r\nimport './VideoPlayer.css';\r\nclass VideoPlayer extends React.Component  {\r\n    // constructor(props){\r\n    //     super(props);\r\n    \r\n        \r\n    //   }\r\n      render(){\r\n          return(\r\n        <div className='VideoPlayer'>\r\n             <p className='f3'>\r\n                {'This video will track your face try it . Try it(; '}  \r\n            </p>\r\n\r\n        <div className='center'>\r\n        <div className=' f3 form center pa4 br5 shadow-5'>\r\n        <video controls autostart=\"true\" autoPlay src={Video} type=\"video/mp4\"  width='500px' heigh='700px' />\r\n        </div>\r\n        </div>\r\n\r\n\r\n\r\n        </div>\r\n        \r\n          );\r\n      }\r\n    \r\n   \r\n}\r\n\r\nexport default VideoPlayer;","import React  from 'react';\nimport Particles from 'react-particles-js';\nimport Navigation from './components/Navigation/Navigation.js';\nimport Logo from './components/Logo/Logo.js';\nimport Signin from './components/ValidatedForm/Signin.js';\nimport Register from './components/ValidatedForm/Register.js';\nimport PasswordChecker from './components/PasswordChecker/PasswordChecker.js';\nimport ImageFaceDetection from './components/ImageFaceDetection/ImageFaceDetection.js'\n// import Camera_display from './components/VideoPlayer/Camera_display.js';\n\n\nimport VideoPlayer from './components/VideoPlayer/VideoPlayer.js';\n\n\nimport './App.css';\n\n\n\n\n// for the background\n/*\ntaken from \nhttps://www.npmjs.com/package/react-particles-js\n*/\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 70,\n      density: {\n        enable: true,\n        value_area: 400\n      }\n    }\n  }\n}\n\n/* \ncreate a STATE for our apps to knows \n  - what the data  that the user entred \n  -remember this data\n  -update at any time its get changed \n  */\nconst initState={\n  input :'',\n  route: 'signin',//keep track were we are in the page\n  isSignedIn : false,\n  user:{\n    id: '',\n    name:'',\n    email:'',\n    entries:0,\n    joined:''\n  }\n}\nclass App extends React.Component  {\n  constructor(){\n    super();\n    this.state=initState\n\n  }\n\n  // componentDidMount=(()=>{\n  //   fetch('/display_users')\n  //   .then(response=>response.json()\n  //   .then(data=>console.log(data)))\n\n  // });\n\n\n  loadUser= (data)=>{\n    this.setState({user:{\n      id: data.id,\n      name:data.name,\n      email:data.email,\n      entries:data.entries,\n      joined:data.joindate\n\n    }})\n  }\n\n    /*\n    int route- on signin page \n     set app on home page if we signin\n     */\n   onRouteChange=(route) =>{\n    if(route==='signout'){ this.setState(initState)}// remove info after signout clear state afer login out\n    else if (route==='home'){this.setState({isSignedIn: true})}\n    this.setState({route: route})\n \n  }\n\n  render(){\n    const {route,isSignedIn} = this.state;\n\n    return (\n      <div className=\"App\">\n        \n       \n       \n       \n        <Particles className='particles'params={particlesOptions}/>\n        <Navigation onRouteChange={this.onRouteChange} isSignedIn={isSignedIn}/>\n        {/* <Camera_display/> */}\n\n        {route ==='home'\n          ? <div>\n              <Logo/>\n              <VideoPlayer/>\n              \n              \n          </div>\n          :(\n            route=== 'imagefacedetection'\n            ? <div>\n                <Logo/>\n                <ImageFaceDetection user= {this.state.user}/>\n      \n            </div>\n\n         :(\n           route==='passwordChecker'\n           ? <PasswordChecker/>\n            :(\n              route=== 'signin'\n                ? <div>\n                  <Signin onRouteChange={this.onRouteChange} loadUser={this.loadUser} />\n                  </div>\n                :( route=== 'signout'\n                ? <Signin onRouteChange={this.onRouteChange} loadUser={this.loadUser}/>\n                : <Register  onRouteChange={this.onRouteChange }loadUser={this.loadUser}/> \n                )  \n              )\n            )\n          )\n        \n         }\n       \n      \n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/brain.f7fd504d.png\";","module.exports = __webpack_public_path__ + \"static/media/test2.584cb17b.mp4\";"],"sourceRoot":""}