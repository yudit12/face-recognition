{"version":3,"sources":["components/Logo/brain.png","components/Navigation/Navigation.js","components/Logo/Logo.js","components/ImageLinkForm/ImageLinkForm.js","components/Rank/Rank.js","components/FaceRecognition/FaceRecognition.js","components/Signin/Signin.js","components/Register/Register.js","components/ErrorBoundry/ErrorBoundry.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","onRouteChange","isSignedIn","style","display","justifyContent","onClick","className","Logo","options","max","height","width","alt","src","brain","ImageLinkForm","input","onInputChange","onButtonSubmit","console","log","type","onChange","Rank","name","entries","FaceRecognition","imageUrl","box","id","heigh","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","Signin","props","onEmailChange","event","setState","signInEmail","target","value","onPasswordChange","signInPassword","onSubmitSignIn","state","fetch","method","headers","body","JSON","stringify","email","password","then","response","json","user","loadUser","this","htmlFor","React","Component","Register","onNameChange","ErrorBoundry","hasError","error","info","children","particlesOptions","particles","number","density","enable","value_area","initState","route","joined","App","data","calculateFaceLocation","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","left_col","top_row","right_col","bottom_row","displayFaceBox","count","Object","assign","catch","err","params","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d4c32206.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brain.f7fd504d.png\";","import React from 'react';\r\n\r\n/*\r\n(NOTE : for  run the func each time onClick opened\r\n and not run the func only when  render called )\r\ninstead writing onRouteChange('siginin')\r\nwe add its as => function \r\n()=>onRouteChange('siginin')\r\n\r\n*/\r\nconst Navigation =({onRouteChange,isSignedIn}) =>{\r\n\r\n    if (isSignedIn)\r\n    {\r\n        return(\r\n        <nav style={{display: 'flex', justifyContent: 'flex-end'}} >\r\n            <p onClick={()=>onRouteChange('signout')} className='f3 link dim black underline pa3 pointer' >Sign Out</p>\r\n          \r\n            \r\n        </nav>\r\n        );\r\n\r\n    }else{\r\n        return(\r\n            <nav style={{display: 'flex', justifyContent: 'flex-end'}} >\r\n                <p onClick={()=>onRouteChange('siginin')} className='f3 link dim black underline pa3 pointer' >Sign In</p>\r\n                <p onClick={()=>onRouteChange('registerome')} className='f3 link dim black underline pa3 pointer' >Register</p>\r\n            </nav>\r\n        );\r\n            \r\n       \r\n\r\n    }\r\n        \r\n\r\n}\r\n\r\nexport default Navigation","import React from 'react';\r\nimport Tilt from 'react-tilt'\r\nimport brain from './brain.png'\r\nimport './Logo.css';\r\nconst Logo =() =>{\r\n    return(\r\n       <div className='ma4 mt0'>\r\n           <Tilt className=\"Tilt br2 shadow-2\" options={{ max : 60 }} style={{ height: 150, width: 150 }} >\r\n                <div className=\"Tilt-inner pa3\">\r\n                     <img  alt='logo' src={brain}/>\r\n                </div>\r\n            </Tilt>\r\n       </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Logo","import React from 'react';\r\nimport './ImageLinkForm.css';\r\n\r\nconst ImageLinkForm = ({input,onInputChange,onButtonSubmit}) => {\r\n\r\n  return (\r\n   \r\n    <div>\r\n      \r\n       {console.log(input)}\r\n      <p className='f3'>\r\n      {'This Brain will detect the face in the picture . Try it(; '}  \r\n      </p>\r\n      \r\n      <div className='center'>\r\n        <div className='form center pa4 br3 shadow-5'>\r\n          <input className='f4 pa2 w-70 center' type='tex'\r\n           onChange={onInputChange}\r\n          \r\n        \r\n           />\r\n\r\n           \r\n          <button className='w-30 grow f4 link ph3 pv2 dib white bg-light-purple'\r\n            onClick={onButtonSubmit}\r\n          >\r\n          Detect</button>\r\n          \r\n        </div>\r\n      </div>\r\n      <p className='f3'>\r\n      <br></br>\r\n      {'*Please enter image, or URL of image '}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageLinkForm;","/*\r\nRank give you\r\n-your user name\r\n- your rank compere to all other users  that submitted pictures\r\n*/\r\n\r\nimport React from 'react';\r\n\r\nconst Rank = ({ name, entries }) => {\r\n  return (\r\n    <div>\r\n      <div className='white f3'>\r\n        {`${name}, your current entry count is...`}\r\n      </div>\r\n      <div className='white f1'>\r\n        {console.log(entries)}\r\n        {entries}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Rank;","import React from 'react';\r\nimport './FaceRecognition.css';\r\n// left = atuo mean the img fix to the widh of the image \r\n//  for getting normal size of image \r\nconst FaceRecognition = ({imageUrl,box}) => {\r\n  return (\r\n    <div className='center ma'>\r\n        <div className='absolute mt2'> \r\n            <img id='inputimage' alt='' src={imageUrl} width='500px' heigh='auto'/>\r\n            {/* div for drawing the square  */}\r\n            <div className='bounding-box' style={{top: box.topRow, right: box.rightCol, bottom: box.bottomRow, left: box.leftCol}}></div>\r\n\r\n        </div>\r\n        \r\n \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FaceRecognition;","import React from 'react';\r\n\r\nclass  Signin extends React.Component {\r\n    constructor(props){\r\n        super();\r\n        this.state={\r\n            signInEmail:'',\r\n            signInPassword: '',\r\n\r\n\r\n        }\r\n    }\r\n    onEmailChange= (event)=>{\r\n        this.setState({signInEmail: event.target.value})\r\n    }\r\n    onPasswordChange= (event)=>{\r\n        this.setState({signInPassword: event.target.value})\r\n    }\r\n\r\n    onSubmitSignIn=()=>{\r\n        console.log(this.state)\r\n        //http://localhost:3000\r\n        fetch('https://shielded-badlands-01382.herokuapp.com/signin',\r\n        // fetch('http://localhost:3000/signin',\r\n        {method:'post',\r\n        headers:{'Content-Type':'application/json'},\r\n        body: JSON.stringify({\r\n            email : this.state.signInEmail,\r\n            password: this.state.signInPassword\r\n            })\r\n        })// send information to the server \r\n        .then(response=>response.json())\r\n        // .then(console.log)\r\n        .then(user=>{\r\n            if (user.id) {\r\n                this.props.loadUser(user)\r\n                this.props.onRouteChange('home');\r\n              }\r\n        })\r\n        \r\n    }\r\n    render (){\r\n       const {onRouteChange}= this.props\r\n        return(\r\n            <article className=\"br3 ba b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\r\n                 <main className=\"pa4 black-80\">\r\n                     <div className=\"measure\">\r\n                     <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n                         <legend className=\"f1 fw6 ph0 mh0\">Sign In</legend>\r\n                         <div className=\"mt3\">\r\n                             <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n                             <input\r\n                                className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                                type=\"email\" \r\n                                name=\"email-address\"\r\n                                id=\"email-address\"\r\n                                onChange={this.onEmailChange}\r\n                                />\r\n                         </div>\r\n                         <div className=\"mv3\">\r\n                             <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n                             <input \r\n                                className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                                type=\"password\"\r\n                                name=\"password\" \r\n                                id=\"password\"\r\n                                onChange={this.onPasswordChange}\r\n                                />\r\n                         </div>\r\n                         <label className=\"pa0 ma0 lh-copy f6 pointer\"><input type=\"checkbox\"/> Remember me</label>\r\n                     </fieldset>\r\n                     <div className=\"\">\r\n                         <input \r\n                             className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\" \r\n                             onClick={this.onSubmitSignIn}\r\n                             type=\"submit\" \r\n                             value=\"Sign in\"/>\r\n                     </div>\r\n                     <div className=\"lh-copy mt3\">\r\n                         <p  onClick={()=>onRouteChange('register')} className=\"f6 link dim black db pointer\">Register</p>\r\n                         {/* <a href=\"#0\" className=\"f6 link dim black db\">Forgot your password?</a> */}\r\n                     </div>\r\n                     </div>\r\n                 </main>\r\n            </article>\r\n             \r\n             \r\n     \r\n         );\r\n\r\n    }\r\n    \r\n}\r\n\r\nexport default Signin","import React from 'react';\r\n\r\nclass Register extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      email: '',\r\n      password: '',\r\n      name: ''\r\n    }\r\n  }\r\n\r\n  onNameChange = (event) => {\r\n    this.setState({name: event.target.value})\r\n  }\r\n\r\n  onEmailChange = (event) => {\r\n    this.setState({email: event.target.value})\r\n  }\r\n\r\n  onPasswordChange = (event) => {\r\n    this.setState({password: event.target.value})\r\n  }\r\n\r\n  onSubmitSignIn = () => {\r\n    // console.log(this.state)\r\n    //http://localhost:3000\r\n   fetch('https://shielded-badlands-01382.herokuapp.com/register', {\r\n      // fetch('http://localhost:3000/register', {\r\n      method: 'post',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify({\r\n        email: this.state.email,\r\n        password: this.state.password,\r\n        name: this.state.name\r\n      })\r\n    })\r\n      .then(response => response.json())\r\n      .then(user => {\r\n        if (user.id) {\r\n          console.log(\"user\",user)\r\n          this.props.loadUser(user)\r\n          this.props.onRouteChange('home');\r\n        }\r\n      })\r\n  }\r\n\r\n  render() {\r\n    // const {onRouteChange}= this.props;\r\n    return (\r\n      <article className=\"br3 ba b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\r\n        <main className=\"pa4 black-80\">\r\n          <div className=\"measure\">\r\n            <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n              <legend className=\"f1 fw6 ph0 mh0\">Register</legend>\r\n              <div className=\"mt3\">\r\n                <label className=\"db fw6 lh-copy f6\" htmlFor=\"name\">Name</label>\r\n                <input\r\n                  className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  id=\"name\"\r\n                  onChange={this.onNameChange}\r\n                />\r\n              </div>\r\n              <div className=\"mt3\">\r\n                <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n                <input\r\n                  className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                  type=\"email\"\r\n                  name=\"email-address\"\r\n                  id=\"email-address\"\r\n                  onChange={this.onEmailChange}\r\n                />\r\n              </div>\r\n              <div className=\"mv3\">\r\n                <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n                <input\r\n                  className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  id=\"password\"\r\n                  onChange={this.onPasswordChange}\r\n                />\r\n              </div>\r\n            </fieldset>\r\n            <div className=\"\">\r\n              <input\r\n                onClick={this.onSubmitSignIn}\r\n                className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\"\r\n                type=\"submit\"\r\n                value=\"Register\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </main>\r\n      </article>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Register;\r\n","\r\nimport React from 'react'; \r\n\r\nclass ErrorBoundry extends React.Component{\r\n    constructor(props)\r\n    {\r\n        super(props)\r\n        this.state={\r\n            hasError: false\r\n        }\r\n    }\r\n    //lifecycle method - kind of try catch  as in java script \r\n    // if smething gooes wrong  this method will run \r\n    componentDidCatch(error, info){\r\n            this.setState({hasError: true})\r\n    }\r\n    render()\r\n    {\r\n        if (this.state.hasError)\r\n        {\r\n            return <h1> Oooops something went wrong!!!  </h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n   \r\n\r\n}\r\nexport default ErrorBoundry;","import React from 'react';\nimport Particles from 'react-particles-js';// for interactive background\n// import Clarifai  from 'clarifai';\nimport Navigation from './components/Navigation/Navigation.js'\nimport Logo from './components/Logo/Logo.js'\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm.js'\nimport Rank from './components/Rank/Rank.js'\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition.js'\nimport Signin from './components/Signin/Signin.js'\nimport Register from './components/Register/Register.js'\nimport ErrorBoundry from './components/ErrorBoundry/ErrorBoundry.js'\nimport './App.css';\n\n\n\n\n/* for interactive background */\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 250,\n      density: {\n        enable: true,\n        value_area: 800\n      }\n    }\n  }\n}\n\nconst initState={\n  input :'',\n  imageUrl:'', /*displayed when we click on submit */\n  box:{},/* contain the region value o the face */ \n  route:'siginin', /*keeps track where we are at the page */\n  isSignedIn: false,\n  user: {\n    id: '',\n    name: '',\n    email: '',\n    entries: 0,\n    joined: ''\n  }  \n}\n\n\nclass App extends React.Component{\n  /* create a STATE for our apps to knows \n  - what the data  that the user entred \n  -remember this data\n  -update at any time its get changed \n  */\n constructor()\n {\n    super();\n    this.state= initState\n      \n    \n  }\n  // update user \n  loadUser = (data) => {\n    this.setState({user: {\n      id: data.id,\n      name: data.name,\n      email: data.email,\n      entries: data.entries,\n      joined: data.joined\n    }})\n  }\n/* calculate face location based on the input we get from clarifai API (return percentage)\n  func return object -  the 4 point of the square\n*/\ncalculateFaceLocation = (data) => {\n  const clarifaiFace=data.outputs[0].data.regions[0].region_info.bounding_box;// return the region of the face \n   const image = document.getElementById('inputimage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    console.log(width,height)\n    return {\n        leftCol: clarifaiFace.left_col * width,\n        topRow: clarifaiFace.top_row * height,\n        rightCol: width - (clarifaiFace.right_col * width),\n        bottomRow: height - (clarifaiFace.bottom_row * height)\n      }\n\n\n}\n\n\n \n/* displayFaceBox */ \n  displayFaceBox = (box) => {\n    console.log(box);\n    this.setState({box: box});\n  }\n\n  /*triggered every time user enter input*/\n  onInputChange = (event) => {\n    // console.log(event) \n    // console.log( event.target.value)/* print the entred input */\n    this.setState({input: event.target.value});\n\n  }\n  onButtonSubmit = () => {\n    \n    // console.log('click');\n     // throw new Error('NOOOOOO') // this.state.input===''  \n    if (this.state.input!==''){\n      console.log(this.state)\n      this.setState({imageUrl: this.state.input});\n    \n    /*predict get : Clarifai model we whant to use  and  the url of the image (input) */\n    //'http://localhost:3000/imageUrl'\n      fetch('https://shielded-badlands-01382.herokuapp.com/imageUrl', {\n        // fetch('http://localhost:3000/imageUrl', {\n        method: 'post',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({\n          input: this.state.input\n          \n        })\n      })\n      .then(response=>response.json())\n      .then( response=> { \n        if (response) {\n          // fetch('http://localhost:3000/image', {\n          fetch('https://shielded-badlands-01382.herokuapp.com/image', {\n            method: 'put',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({\n              id: this.state.user.id\n            })\n          })\n            .then(response => response.json())\n            .then(count => {\n              //Object.assign get the target object that we Act on it, with  what\n              // in this case increase our user entries \n              this.setState(Object.assign(this.state.user, { entries: count}))\n            })\n            .catch(console.log)\n\n        }\n        this.displayFaceBox(this.calculateFaceLocation(response))\n      })\n      .catch(err=>console.log(err));\n    }\n    \n    \n  }\n  /*  set app on home page if we signin*/\n  onRouteChange=(route) =>{\n    if(route==='signout'){ this.setState(initState)}// remove info after signout clear state afer login out\n    else if (route==='home'){this.setState({isSignedIn: true})}\n    this.setState({route: route})\n  \n  }\n\n  render()\n  {\n    const {isSignedIn,imageUrl,route, box} = this.state;\n    return (\n      <div className=\"App\">\n            <Particles className='particles'\n              params={particlesOptions}\n        \n            />\n        \n        <Navigation isSignedIn={isSignedIn} onRouteChange={this.onRouteChange}></Navigation>\n        { route==='home'\n        ?<div>\n          <Logo></Logo>\n          <Rank\n            name={this.state.user.name}\n            entries={this.state.user.entries}>\n          </Rank>\n          <ErrorBoundry>\n          <ImageLinkForm\n            input={this.state.input} \n            onInputChange={this.onInputChange}\n            onButtonSubmit={this.onButtonSubmit}\n            >\n          </ImageLinkForm> \n          </ErrorBoundry> \n          <FaceRecognition box={box} imageUrl= {imageUrl}></FaceRecognition>\n        </div>\n        :(\n          route==='siginin'\n          ? <Signin  loadUser={this.loadUser} onRouteChange={this.onRouteChange}></Signin>\n          :<Register loadUser={this.loadUser} onRouteChange={this.onRouteChange}></Register>\n\n        )\n        \n        }\n       \n\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons' // for easy styling \n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}